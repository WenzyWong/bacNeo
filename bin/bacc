#!/bin/bash
FQ1=""
FQ2=""
OMICS=""
REF=""
OUT=""
ZIP=""
THREADS=16
DB=""
declare -a TAXONOMY_LEVELS
NEOBAC=$(echo $PATH | tr ':' '\n' | grep 'bacNeo')

print_logo() {
  echo -e "\e[36m"
  echo '
               _                 _   _             ___   ___  
              | |               | \ | |           |__ \ / _ \ 
              | |__   __ _  ___ |  \| | ___  ___    ) || | | |
              | `_ \ / _` |/ __|| . ` |/ _ \/ _ \  / / | | | |
              | |_) | (_| | (__ | |\  |  __/ (_) |/ /__| |_| |
              |____/ \__,_|\___||_| \_|\___|\___/|____(_)___/ 
  '
  echo '
               _                    
              | |
              | |__   __ _  ___ ___ 
              | `_ \ / _` |/ __/ __|
              | |_) | (_| | (_| (__ 
              |_.__/ \__,_|\___\___|
  '
  echo -e "\e[0m"
}

usage() {                                 # Function: Print a help message.
  print_logo
  echo "Usage: bacc [ -1 FQ1 ] [ -2 FQ2 ] [-m OMICS] [ -g ZIP ] [ -r REF ] [ -o OUT ] [ -t THREADS ] [ -d DB ] [-l TAXONOMY]
  -1 Paired-end clean data (R1) in fastq format.
  -2 Paired-end clean data (R2) in fastq format.
  -m Type of omics data. 'RNA' for transcriptome, 'WES'/'WGS' for genome.
  -g Whether the fastq file is zipped. 'y' for zipped (.fastq.gz format), 'n' for unzipped (.fastq format).
  -r Reference directory path for hisat2 alignment (if omics data is RNA-seq) or bwa alignment (if omics data is WES/WGS).
  -o Output directory path.
  -t Number of threads (Default threads = 16).
  -d The directory path of your datasebases generated through bacNeo2 --download-db.
  -l Taxonomy level you would like to generate. 
     Taxonomy levels include: 'd' for Domain, 'p' for Phylum, 'c' for Class, 'o'for Order, 'f' for Family, 'g' for Genus, and 's' for Species. 
     Please ensure the level(s) you input is(are) included above. 
     If you would like to calculate bacterial counts in multiple levels, you could input the characters one by one, e.g., -l g -l s.
  Make sure that you've already run bacNeo2 --download-db previously to generate required databases.
  If you have multiple sample files and want to run this command repeatedly, it is recommended to make independent directory for each sample." 1>&2 
}
exit_abnormal() {                         # Function: Exit with error.
  usage
  exit 1
}

while getopts ":1:2:m:g:r:o:t:d:l:" options; do # Loop: Get the next option;
                                                # use silent error checking;
                                                # options n and t take arguments.
  case "${options}" in
    1)
        FQ1=${OPTARG}
        ;;
    2)
        FQ2=${OPTARG}
        ;;
    m)
        OMICS=${OPTARG}
        ;;
    g)
        ZIP=${OPTARG}
        ;;
    r)
        REF=${OPTARG}
        ;;
    o)
        OUT=${OPTARG}
        ;;
    t)
        THREADS=${OPTARG}
        ;;
    d)
        DB=${OPTARG}
        ;;
    l)
        TAXONOMY_LEVELS+=("${OPTARG}")
        ;;
    :)                                    # If expected argument omitted:
      echo "Error: -${OPTARG} requires an argument."
      exit_abnormal                       # Exit abnormally.
      ;;
    *)                                    # If unknown (any other) option:
      exit_abnormal                       # Exit abnormally.
      ;;
  esac
done

if [ ${ZIP} == "y" ]
then
  SAMPLE=$(basename "$FQ1")
  SAMPLE=${SAMPLE%.*.*}
elif [ ${ZIP} == "n" ]
then
  SAMPLE=$(basename "$FQ1")
  SAMPLE=${SAMPLE%.*}
else
  echo -e "\033[31m Wrong parameter -g, please check the help file. \033[0m"
fi

if [ ${OMICS} == "RNA" ]
then
  echo -e "\033[46;37m >> STEP 0: Aligning for RNA sequencing... \033[0m"
  hisat2 -x ${REF} -1 ${FQ1} -2 ${FQ2} -p ${THREADS} -S ${OUT}/${SAMPLE}".sam"
elif [ ${OMICS} == "WES" ]
then
  echo -e "\033[46;37m >> STEP 0: Aligning for WES... \033[0m"
  bwa mem -t ${THREADS} -M -R "@RG\tID:Lane foo\tPL:illumina\tLB:${SAMPLE}\tSM:${SAMPLE}" ${REF} ${FQ1} ${FQ2} > ${OUT}/${SAMPLE}".sam"
elif [ ${OMICS} == "WGS" ]
then
  echo -e "\033[46;37m >> STEP 0: Aligning for WGS... \033[0m"
  bwa mem -t ${THREADS} -M -R "@RG\tID:Lane foo\tPL:illumina\tLB:${SAMPLE}\tSM:${SAMPLE}" ${REF} ${FQ1} ${FQ2} > ${OUT}/${SAMPLE}".sam"
else
  echo -e "\033[31m Wrong parameter -m, please check the help file. \033[0m"
fi

echo -e "\033[46;37m >> STEP 1: Sorting... \033[0m"
samtools sort -o ${OUT}/${SAMPLE}"_sorted.bam" -@ ${THREADS} ${OUT}/${SAMPLE}".sam"
rm ${OUT}/${SAMPLE}".sam"

echo -e "\033[46;37m >> STEP 2: Building index... \033[0m"
samtools index ${OUT}/${SAMPLE}"_sorted.bam" ${OUT}/${SAMPLE}".bai"

echo -e "\033[46;37m >> STEP 3: Extracting unmapped reads... \033[0m"
samtools view -b -f 4 ${OUT}/${SAMPLE}"_sorted.bam" > ${OUT}/${SAMPLE}"_unmap.bam"

echo -e "\033[46;37m >> STEP 4: Converting unmapped bam file to fastq files... \033[0m"
samtools fastq -@ ${THREADS} ${OUT}/${SAMPLE}"_unmap.bam" -1 ${OUT}/${SAMPLE}"_unmap_R1.fq" -2 ${OUT}/${SAMPLE}"_unmap_R2.fq"

echo -e "\033[46;37m >> STEP 5: Classifying microbe reads... \033[0m"
kraken2 --threads ${THREADS} --db ${DB}"/bac_db" --paired ${OUT}/${SAMPLE}"_unmap_R1.fq" ${OUT}/${SAMPLE}"_unmap_R2.fq" --output ${OUT}/${SAMPLE}".o" --report ${OUT}/${SAMPLE}".mpa" --use-mpa-style

echo -e "\033[46;37m >> STEP 6: Converting taxonomy reads into fasta files... \033[0m"
python ${NEOBAC}"/utils/bacc_extract_kraken_reads.py" -k ${OUT}/${SAMPLE}".o" -s1 ${OUT}/${SAMPLE}"_unmap_R1.fq" -s2 ${OUT}/${SAMPLE}"_unmap_R2.fq" -o ${OUT}/${SAMPLE}"_bacreads.fasta"

echo -e "\033[46;37m >> STEP 7: Removing potential contaminants... \033[0m"
mkdir -p ${OUT}"/checkm2_predict/"
checkm2 predict --threads ${THREADS} --input ${OUT}/${SAMPLE}"_bacreads.fasta" --output-directory mkdir -p ${OUT}"/checkm2_predict/" --database_path ${DB}"/CheckM2_database/uniref100.KO.1.dmnd"

echo -e "\033[46;37m >> STEP 8: Extracting counts for taxonomy ${TAXONOMY}... \033[0m"
# Valiate inputted taxonomy level(s)
valid_levels=("d" "p" "c" "o" "f" "g" "s")
for TAXONOMY in ${TAXONOMY_LEVELS[@]}; do
    valid=false
    for valid_level in ${valid_levels[@]}; do
        if [ ${TAXONOMY} = ${valid_level} ]; then
            valid=true
            break
        fi
    done
    if [ "$valid" = false ]; then
        echo "ERROR: ${TAXONOMY} is not a valid taxonomy level!"
        exit 1
    fi
    
    echo -e "\033[46;37m >> STEP 9: Extracting counts for taxonomy ${TAXONOMY}... \033[0m"
    python ${NEOBAC}"/utils/bacc_extract.py" -p ${OUT} -s ${SAMPLE} -l ${TAXONOMY}
done